<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Drupal Planet on ninjaduck</title>
    <link>http://www.ninjaducks.in/tags/drupal-planet/</link>
    <description>Recent content in Drupal Planet on ninjaduck</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 07 Jul 2015 13:35:54 +0530</lastBuildDate>
    <atom:link href="http://www.ninjaducks.in/tags/drupal-planet/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Writing Tests for Drush Commands</title>
      <link>http://www.ninjaducks.in/hacking/writing-tests-for-drush-commands/</link>
      <pubDate>Tue, 07 Jul 2015 13:35:54 +0530</pubDate>
      
      <guid>http://www.ninjaducks.in/hacking/writing-tests-for-drush-commands/</guid>
      <description>

&lt;p&gt;As a part of my GSoC project, I have been recently writing functional tests for &lt;a href=&#34;https://drupal.org/site_audit&#34;&gt;site_audit&lt;/a&gt; &amp;ndash; a Drush extension that provides drush commands for static analysis of a Drupal site. The process seemed painful at first due to lack of good documentation and gaps in my knowledge of Drush and PHPUnit. But, after a few hiccups intially, I was successfully able to write tests for Site Audit.&lt;/p&gt;

&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;

&lt;p&gt;Drush uses &lt;a href=&#34;https://phpunit.de/&#34;&gt;PHPUnit&lt;/a&gt; testing framework for testing its core commands. All the tests are namespaced under the name &lt;code&gt;Unish&lt;/code&gt;. Drush test suites provides some base classes which, amongst other functionality, have primitves for setting up a drupal sandbox to provide an environment for testing drush commands.&lt;/p&gt;

&lt;p&gt;All the Drush tests are inside the &lt;a href=&#34;https://github.com/drush-ops/drush/tree/master/tests&#34;&gt;tests&lt;/a&gt; directory inside the drush root folder which also contains a readme file providing some instructions to run the tests. The directory also has configuration settings for  PHPUnit
in the &lt;a href=&#34;https://github.com/drush-ops/drush/blob/master/tests/phpunit.xml.dist&#34;&gt;phpunit.xml.dist&lt;/a&gt; directory. If you look inside this file, there are some commented lines that contain environment requried for the tests to run. You can either uncomment these and provide appropriate values or set these variables as bash environment variables where you run the test.&lt;/p&gt;

&lt;p&gt;To run the tests on your local machine, first go the the drush root directory (directory where drush is installed) and run

composer install

This command will install all the dependencies (including PHPUnit) required for running the tests inside a directory named &lt;code&gt;vendor&lt;/code&gt;. Then run the &lt;code&gt;unish.sh&lt;/code&gt; script from the drush root directory.&lt;/p&gt;

&lt;h2 id=&#34;creating-your-own-test&#34;&gt;Creating your own Test&lt;/h2&gt;

&lt;p&gt;You can create a directory named &lt;code&gt;tests&lt;/code&gt; inside you drush extension to contain all the tests. PHPUnit looks inside *Test.php files inside a directory for tests. Drush follows Lower Camel Case for the naming of both the file and the class name. So all you file names should be in Lower Camel Case with a &lt;code&gt;Test&lt;/code&gt; suffix.&lt;/p&gt;


&lt;?php
/**
 * @file
 * Contains /site_audit/tests/BestPracticesFast404Case.
 */

namespace Unish;

/**
 * Class BestPracticesFast404Case.
 *
 * @group commands
 */
class BestPracticesFast404Case extends CommandUnishTestCase {

  /**
   * Sets up the environment for this test.
   */
  public function setUp() {
  }


&lt;p&gt;First, we specify the namespace &lt;code&gt;Unish&lt;/code&gt; for the test. The &lt;code&gt;@group&lt;/code&gt; annotation in the doc comment is optional. You can read about its use &lt;a href=&#34;https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.group&#34;&gt;here&lt;/a&gt;. Our class extends &lt;code&gt;CommandUnishTestCase&lt;/code&gt; which provides all the common functionality like setting up a drupal sandbox and running drush commands used in functional tests. Finally we have a &lt;code&gt;setUp()&lt;/code&gt; function which is invoked before a test method is run. In We set up the object we will test against in this method.&lt;/p&gt;

&lt;h2 id=&#34;the-setup-function&#34;&gt;The SetUp Function&lt;/h2&gt;


&lt;?php

  public function setUp() {
    if (UNISH_DRUPAL_MAJOR_VERSION &lt; 8) {
      $this-&gt;markTestSkipped(&#39;This version of Site Audit is for D8&#39;);
    }
    $site = $this-&gt;setUpDrupal(1, TRUE, UNISH_DRUPAL_MAJOR_VERSION, &#39;standard&#39;);
    $root = $this-&gt;webroot();
    $this-&gt;options = array(
      &#39;yes&#39; =&gt; NULL,
      &#39;root&#39; =&gt; $root,
      &#39;uri&#39; =&gt; key($site),
    );
    // Symlink site_audit inside the site being tested, so that it is available
    // as a drush command.
    $target = dirname(__DIR__);
    \mkdir($root . &#39;/drush&#39;);
    \symlink($target, $this-&gt;webroot() . &#39;/drush/site_audit&#39;);
  }


&lt;p&gt;In this function, we have used &lt;code&gt;UNISH_DRUPAL_MAJOR_VERSION&lt;/code&gt; which is provided by the PHPUnit settings variables we had set in phpunit.xml.dist . Since the version of site_audit where this test is written is for Drupal 8, we will skip the test if it is being run for Drupal 7.  The &lt;code&gt;setUpDrupal()&lt;/code&gt; is a function provided by &lt;code&gt;CommandUnishTestCase&lt;/code&gt; class and is used to create any number of drupal sanboxes which will be used for testing. Here, we are installing a single drupal 8 site with the standard profile.
&lt;code&gt;$root&lt;/code&gt; variable has the path to the root directory of the website.&lt;/p&gt;

&lt;p&gt;Since the drush commands will be run in the context of the sandbox we have just installed, it will not be able to discover the commands defined by the extensions. So, we will have to symlink our extension inside the drush directory inside the webroot using the &lt;code&gt;symlink()&lt;/code&gt; function. Since the drush directory does not exist by default, it has to be created first using the &lt;code&gt;mkdir()&lt;/code&gt; function.&lt;/p&gt;

&lt;h2 id=&#34;the-test-function&#34;&gt;The Test Function&lt;/h2&gt;


&lt;?php

  /**
   * If fast_404 is enabled and fast_404 paths are empty, check should warn.
   */
  public function testFast404() {
    // Enable fast_404 and make fast_404 paths empty.
    $eval1 = &#34;\$config = \\Drupal::configFactory()-&gt;getEditable(&#39;system.performance&#39;); \$config-&gt;set(&#39;fast_404.enabled&#39;, TRUE); \$config-&gt;save();&#34;;
    $eval2 = &#34;\$config = \\Drupal::configFactory()-&gt;getEditable(&#39;system.performance&#39;); \$config-&gt;set(&#39;fast_404.paths&#39;, &#39;&#39;); \$config-&gt;save();&#34;;
    $this-&gt;drush(&#39;php-eval&#39;, array($eval1), $this-&gt;options);
    $this-&gt;drush(&#39;php-eval&#39;, array($eval2), $this-&gt;options);

    // Execute the best-practices command and get output.
    $this-&gt;drush(&#39;audit-best-practices&#39;, array(), $this-&gt;options + array(&#39;detail&#39; =&gt; NULL, &#39;json&#39; =&gt; NULL));
    $output = json_decode($this-&gt;getOutput());
    $this-&gt;assertEquals(\SiteAuditCheckAbstract::AUDIT_CHECK_SCORE_WARN, $output-&gt;checks-&gt;SiteAuditCheckBestPracticesFast404-&gt;score);
  }



&lt;p&gt;The test has to edit some config variables of the drupal site. This is accomplished by the &lt;code&gt;php-eval&lt;/code&gt; command provided by drush. The &lt;code&gt;php-eval&lt;/code&gt; command evaluate arbitrary php code after bootstrapping Drupal. &lt;code&gt;CommandUnishTestCase&lt;/code&gt; provides the &lt;code&gt;drush()&lt;/code&gt; function which can be used to execute drush commands. The second argument of the function takes in the arguments to the drush command and the third argument takes the options. Note that it is necessary to provide the options we had defined in the &lt;code&gt;setUp()&lt;/code&gt; function so that it executes the drush command on the proper test site (the one which we created in the setUp function).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$eval1&lt;/code&gt; and &lt;code&gt;$eval2&lt;/code&gt; contain the php code to be executed in strings and then we pass these as arguments to the &lt;code&gt;php-eval&lt;/code&gt; command. The output of the drush command can be obtained by the &lt;code&gt;getOutput()&lt;/code&gt; function. PHPUnit provides several functions for different types of &lt;a href=&#34;https://phpunit.de/manual/current/en/appendixes.assertions.html&#34;&gt;assetions&lt;/a&gt; which determine whether the test passed or failed.&lt;/p&gt;

&lt;p&gt;After all the tests in a class are finished, the drupal sandbox created for tests is automatically removed. All the tests in a class share the same sandbox. Any test in the middle of the class can remove the existing sandbox and create a new one using the &lt;code&gt;setUpFreshSandBox()&lt;/code&gt; function. The &lt;code&gt;setUpDrupal()&lt;/code&gt; will have to be called again to install drupal for testing after this.&lt;/p&gt;

&lt;h2 id=&#34;running-the-tests&#34;&gt;Running the tests&lt;/h2&gt;

&lt;p&gt;To run the tests, you have to run PHPUnit pointing to the phpunit.xml.dist inside the drush tests directory. So running the following command from &lt;strong&gt;inside the root of you drush extension&lt;/strong&gt; should run the tests.&lt;/p&gt;


phpunit --configuration [path to drush tests directiory] [path to your tests directory]


&lt;p&gt;In our case, the path to our tests directory is tests. If you install drush using composer, it will be inside .composer/vendor/drush directory . In this case, following command will work.
 
 phpunit --configuration .composer/vendor/drush/drush/tests tests
 &lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There are other functions provided by the test classes in Unish. You can look them up inside the drush codebase. The best resource to learn about testing drush commands is to look at the existing tests written for the drush core commands. The tests I am writing can be found in the Site Audit github repository &lt;a href=&#34;https://github.com/shivanshuag/site_audit/tree/unit-tests/tests&#34;&gt;here&lt;/a&gt; and these will eventually be merged to the main github repository of Site Audit &lt;a href=&#34;https://github.com/fluxsauce/site_audit&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I would be happy to here feedback and suggestions for improvements on the article.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting Up PHP_CodeSniffer for Drupal 7 and 8</title>
      <link>http://www.ninjaducks.in/hacking/setting-up-php-codesniffer/</link>
      <pubDate>Thu, 25 Jun 2015 13:35:54 +0530</pubDate>
      
      <guid>http://www.ninjaducks.in/hacking/setting-up-php-codesniffer/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer&#34;&gt;PHP CodeSniffer&lt;/a&gt; is a library which tokenises PHP, Javascript and CSS. &lt;a href=&#34;https://www.drupal.org/project/coder&#34;&gt;Coder&lt;/a&gt; is a Drupal project that provides sniffs for PHP CodeSniffer which tell whether a piece of code follows &lt;a href=&#34;https://www.drupal.org/coding-standards&#34;&gt;Drupal coding standards&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My GSoC project requires me to work on both - Drupal 7 and 8 version of &lt;a href=&#34;https://drupal.org/project/site_audit&#34;&gt;site_audit&lt;/a&gt;. So, I had to set up PHP_CodeSniffer such that it can work with both the versions of Drupal. The Coder standards are different for Drupal 7 and Drupal 8. This post deals with how to set up CodeSniffer in such a suituation. This will require installing coder module twice, once for Drupal 7 standards and other for Drupal 8 standards.&lt;/p&gt;

&lt;h2 id=&#34;installing-codesniffer&#34;&gt;Installing CodeSniffer&lt;/h2&gt;

&lt;p&gt;CodeSniffer can be installed using composer by the following command

composer global require squizlabs/PHP_CodeSniffer:\&gt;=2

#make phpcs command globally availabe
sudo ln -s ~/.composer/vendor/bin/phpcs /usr/local/bin
&lt;/p&gt;

&lt;h2 id=&#34;installing-coder-for-drupal-8&#34;&gt;Installing Coder for Drupal 8&lt;/h2&gt;

&lt;p&gt;Coder provides the set of sniffs for CodeSniffer. We need two copies of this, one for Drupal 7 and other for Drupal 8.
Install the first copy using Composer

composer global require drupal/coder

This will install 8.x-2.x version of coder which provides standards for Drupal 8. Composer puts the code module inside &lt;code&gt;$HOME/.composer/vendor/drupal/&lt;/code&gt; directory.&lt;/p&gt;

&lt;h2 id=&#34;installing-coder-for-drupal-7&#34;&gt;Installing Coder for Drupal 7&lt;/h2&gt;

&lt;p&gt;Install the second copy using drush

drush dl coder-7.x --destination=$HOME/.drush

This will download 7.x2.x version of coder to &lt;code&gt;.drush&lt;/code&gt; directory inside your home folder.&lt;/p&gt;

&lt;h2 id=&#34;creating-aliases-for-usage&#34;&gt;Creating Aliases for usage&lt;/h2&gt;

&lt;p&gt;Different aliases can be created for CodeSniffer with Drupal 7 standards and CodeSniffer with Drupal 8 standards. To create aliases, add the following into your &lt;code&gt;.bashrc&lt;/code&gt; or &lt;code&gt;.zshrc&lt;/code&gt; file

#drupalcs8 alias for testing Drupal 8 coding standards
alias drupalcs8=&#34;$HOME/.composer/vendor/squizlabs/php_codesniffer/scripts/phpcs --standard=~/.composer/vendor/drupal/coder/coder_sniffer/Drupal --extensions=&#39;php,module,inc,install,test,profile,theme,js,css,info,txt&#39;&#34;

#drupalcs7 for testing Drupal 7 coding standards
alias drupalcs7=&#34;phpcs --standard=~/.drush/coder/coder_sniffer/Drupal --extensions=&#39;php,module,inc,install,test,profile,theme,js,css,info,txt&#39;&#34;
&lt;/p&gt;

&lt;p&gt;To test some code for Drupal 8 coding standards, run &lt;code&gt;drupalcs8 [path to file/folder to check]&lt;/code&gt;. Similarly, &lt;code&gt;drupalcs7&lt;/code&gt; can be used to test for Drupal 7 coding standards.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Caching In Drupal 8</title>
      <link>http://www.ninjaducks.in/hacking/caching-in-drupal-8/</link>
      <pubDate>Wed, 24 Jun 2015 13:35:54 +0530</pubDate>
      
      <guid>http://www.ninjaducks.in/hacking/caching-in-drupal-8/</guid>
      <description>

&lt;p&gt;First week of my GSoC 2015 project required me to port the caching report of Site Audit to Drupal 8. To generate caching report, some checks are performed on the drupal website&amp;rsquo;s various cache settings. There have been some major changes in Drupal 8 caching architecture from Drupal 7. Most of them are fairly new with little documentation. This post contains a list of articles that helped me understand how caching works in Drupal 8.&lt;/p&gt;

&lt;p&gt;If you go and have a look at the &lt;code&gt;/admin/config/development/performance&lt;/code&gt; page of a Drupal 8 site, you will find most of the caching options which were there in Drupal 7 missing. There is no option for enabling Page Caching, Block caching etc. on the page. Where did they all go?&lt;/p&gt;

&lt;h2 id=&#34;cache-api-in-drupal-8&#34;&gt;Cache API in Drupal 8&lt;/h2&gt;

&lt;p&gt;A good place to start is having a look at &lt;a href=&#34;https://api.drupal.org/api/drupal/core!modules!system!core.api.php/group/cache/8&#34;&gt;Cache API documentation&lt;/a&gt; for Drupal 8. It gives a basic idea of Cache Bins, Cache Tags, Cache Backends and how to use those. The idea of Cache Bins and Cache backends is similar to that of Drupal 7 but Cache Tags is a new concept which helps in cache invalidation (more on this later)&lt;/p&gt;

&lt;h2 id=&#34;render-caching&#34;&gt;Render Caching&lt;/h2&gt;

&lt;p&gt;But what about page caching and block caching? It is enabled by default! And it is faster than Drupal 7 caching. Caching for all entities in Drupal 8 is done using a new technique called render caching. More informaiton on this can be found at - &lt;a href=&#34;https://www.acquia.com/blog/drupal-8-performance-render-caching&#34;&gt;Drupal 8 performance: render caching&lt;/a&gt;. This article also provides a good overview of how cache tags are used in cache invalidation and how it makes Drupal 8 cache faster than Drupal 7 chance.&lt;/p&gt;

&lt;p&gt;A detailed explanation how to use render caching (it also makes the concept of render caching more clear) can be found at - &lt;a href=&#34;https://www.drupal.org/developing/api/8/render/arrays/cacheability&#34;&gt;Cacheability of render arrays&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;More details about Cache Contexts can be found at - &lt;a href=&#34;https://www.drupal.org/developing/api/8/cache/contexts&#34;&gt;Cache Context&lt;/a&gt;. I am still exploring how these are useful but I think different contexts are used to assign different Cache Ids to the same entity.&lt;/p&gt;

&lt;h2 id=&#34;more-resources-to-understand-drupal-8-caching&#34;&gt;More Resources to Understand Drupal 8 Caching&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wimleers.com/talk-render-caching-drupal-7-and-8/#/5&#34;&gt;Talk on Render Caching by Wim Leers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://drupalwatchdog.com/volume-4/issue-1/automagic-speed-cache&#34;&gt;Render Cache in Drupal 8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wimleers.com/blog/drupal-8-page-caching-enabled-by-default&#34;&gt;Drupal 8 now has page caching enabled by default&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Porting a module to Drupal 8</title>
      <link>http://www.ninjaducks.in/hacking/porting-a-module-to-drupal8/</link>
      <pubDate>Mon, 02 Jun 2014 13:35:54 +0530</pubDate>
      
      <guid>http://www.ninjaducks.in/hacking/porting-a-module-to-drupal8/</guid>
      <description>

&lt;p&gt;I am porting a drupal 7 module named &lt;a href=&#34;https://drupal.org/project/securesite&#34;&gt;securesite&lt;/a&gt; to drupal 8 under of Google Summer Of Code&amp;rsquo;14. It has  been two weeks into the coding period and I am thoroughly enjoying it. This is my first port in a series of posts that I plan to write during this period.&lt;/p&gt;

&lt;p&gt;One look at a drupal 8 module is enough to make you realize that there have been some major changes in its architecture. If you observe closely, you will find ample use of OOP constructs, YAML files, and a directory structure totally different form its drupal 7 counterpart. There is enough mention about the big changes in drupal 8 on the web to scare anyone. With this series of posts, I aim to simplify this process of porting a module to drupal 8 for everyone - new to drupal or already experienced in drupal 7. I will also clarify some of the less documented things about drupal 8 which perplexed me while porting.&lt;/p&gt;

&lt;h2 id=&#34;development-environment&#34;&gt;Development Environment&lt;/h2&gt;

&lt;p&gt;First step is to set up the development environment for the project. I prefer &lt;a href=&#34;http://www.jetbrains.com/phpstorm/&#34;&gt;phpstorm&lt;/a&gt; IDE, even though it is not free, due to its excellent drupal support. The following link explains how to set up phpstorm for drupal module development -&lt;a href=&#34;https://drupal.org/node/1962108&#34;&gt;https://drupal.org/node/1962108&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Currently, drupal 8 support is avaliable in &lt;a href=&#34;http://confluence.jetbrains.com/display/PhpStorm/PhpStorm+Early+Access+Program&#34;&gt;phpstorm-eap&lt;/a&gt;. The IDE is awesome enough to not only point out the syntax errors, but even mark the functions you are using that have been deprecated or don&amp;rsquo;t exist drupal 8.&lt;/p&gt;

&lt;h2 id=&#34;oop-namespaces-and-yaml-files&#34;&gt;OOP, Namespaces and YAML files&lt;/h2&gt;

&lt;p&gt;I feel that the best way of learning on how to make a d8 module is by looking at the existing d8 module in drupal core. They make up for the lack of documentation in many places.&lt;/p&gt;

&lt;p&gt;On looking at a d8 version of a d7 module, first thing you need to figure out is - where did all the code and hooks in &lt;code&gt;.module&lt;/code&gt; file go?
The concepts of PHP namespaces and PSR-0 standards are very lucidly explained by &lt;a href=&#34;https://drupal.org/user/78040&#34;&gt;effulgentsia&lt;/a&gt; in
&lt;a href=&#34;http://effulgentsia.drupalgardens.com/content/drupal-8-hello-oop-hello-world&#34;&gt;http://effulgentsia.drupalgardens.com/content/drupal-8-hello-oop-hello-world&lt;/a&gt;
Reading above removes a lot of confusion about so many directories and files in the module and the use of namespaces.
Some other useful points to be noted from the above blog post are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.info&lt;/code&gt; file has changed to &lt;code&gt;.info.yml&lt;/code&gt; file. You can find more about it on &lt;a href=&#34;https://drupal.org/node/2000204&#34;&gt;https://drupal.org/node/2000204&lt;/a&gt;. For those who don&amp;rsquo;t know about the &lt;code&gt;.info&lt;/code&gt; file, look up the drupal documentation for the same at &lt;a href=&#34;https://drupal.org/node/542202&#34;&gt;https://drupal.org/node/542202&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;use of Controllers and routing by YAML files which was earlier implemented by &lt;code&gt;hook_menu&lt;/code&gt;. More on routing at &lt;a href=&#34;https://drupal.org/developing/api/8/routing&#34;&gt;https://drupal.org/developing/api/8/routing&lt;/a&gt;. If you don&amp;rsquo;t know about drupal hooks, look it up in the drupal documentation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;configuration-management&#34;&gt;Configuration Management&lt;/h2&gt;

&lt;p&gt;One of the bigger changes in Drupal 8 is the Configuration Management Initiative which completely replaces the Drupal 7 variables. One of the reasons for this is to be able to store configuration in files rather than database which helps in easier import-export of the configuration.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you don&amp;rsquo;t know what varibales are and why are they used, here is a simple explanation. Many a times in your module, you need to store module settings or state or any other information required by the module. These are stored in the variable table in the database.&lt;/li&gt;
&lt;li&gt;To know more about the Simple Configuration API, look at &lt;a href=&#34;https://drupal.org/node/1809490&#34;&gt;https://drupal.org/node/1809490&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The next link explains on how to convert the variables of your d7 module to d8. It it perhaps the most useful link you will find regarding CMI.  &lt;a href=&#34;https://drupal.org/node/1667896&#34;&gt;https://drupal.org/node/1667896&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;You can use the &lt;a href=&#34;https://drupal.org/project/config_inspector&#34;&gt;Config Inspector&lt;/a&gt; module to find the variables in core. Once you have converted your variables to configuration keys, you can see their values through this module(you will also have to create a schema file for this module to show your configuration). Also have a look at the config.yml file of core modules to have an idea of how to convert the variables to configuration keys.&lt;/li&gt;
&lt;li&gt;You can define schema for you configuration. &lt;a href=&#34;https://drupal.org/node/1905070&#34;&gt;https://drupal.org/node/1905070&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Apart from configuration, there are other type of informations also like state information and configuration entities. More on this at - &lt;a href=&#34;https://drupal.org/node/2120523&#34;&gt;https://drupal.org/node/2120523&lt;/a&gt;. Many of the d7 variables have been moved to state. The next link explains on how to find these varibles and convert them. &lt;a href=&#34;https://drupal.org/node/2120523&#34;&gt;https://drupal.org/node/1787318&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;key-takeaways&#34;&gt;Key Takeaways&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;config keys are just like variables&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.settings.yml&lt;/code&gt; file is to define default values for the varibales&lt;/li&gt;
&lt;li&gt;It is not necessary to define a key in &lt;code&gt;.settings.yml&lt;/code&gt; file before using it(get or set) anywhere in the code. But make sure to include all your keys in the schema file.&lt;/li&gt;
&lt;li&gt;can also set default values in &lt;code&gt;hook_install()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If a key has not been set earlier in the code and its default value is not defined in &lt;code&gt;hook_install()&lt;/code&gt; or &lt;code&gt;.settings.yml&lt;/code&gt; file, get function on the key returns NULL&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;install-file&#34;&gt;.install file&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;hook_enable&lt;/code&gt; and &lt;code&gt;hook_disable&lt;/code&gt; have been deprecated. &lt;a href=&#34;https://drupal.org/node/2193013&#34;&gt;https://drupal.org/node/2193013&lt;/a&gt;. To port to d8, all the tasks that were being performed in  &lt;code&gt;hook_enable&lt;/code&gt; are to be performed in &lt;code&gt;hook_install&lt;/code&gt;. Same with &lt;code&gt;hook_disable&lt;/code&gt; and &lt;code&gt;hook_uninstall&lt;/code&gt;.
If you have not developed a drupal 7 module before, the difference between disable-enable and install-uninstall can be confounding. Disabling a module leaves its configuration untouched, along with any data like variables it may have created while uninstalling deletes all the data. Due to removal of disabled state in d8, some of the tasks performed in &lt;code&gt;hook_enable&lt;/code&gt; may become unecessary.&lt;/p&gt;

&lt;p&gt;I hope someone finds this useful. I will write about forms, tests and authentication in my next blog post.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>